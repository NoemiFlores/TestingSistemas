**CAPÍTULO 5 - DEFECTOS**
-¿Qué es un defecto? Es una discrepancia o diferencia entre el resultado esperado de tu caso de prueba contra el resultado actual que muestra el sistema bajo prueba
		     Es un error funcional del código
*Defectos Accionables*
-¿Cómo levantar un defecto?
	1.-Debes tener una plantilla con los datos a llenar, previamente te debieron capacitar como usarla
	2.-La plantilla puedes estar en EXCEL, WORD o en una herramienta de gestión de defectos
	3.-Se llena la plantilla y se envía al desarrollador
-Datos de una plantilla de Defectos 
	Paquete, origen, no. de errores, clasificacion de errores, estatus, ID Bug, prioridad, severidad, responsable de pruebas, responsable solución, 
	descripción del Bug, ciclo encontrado, ciclo cerrado, resultados esperados en documentos de analisis o Ejecución de prueba, pasos para reprodcir el error
-¿Qué es un defecto accionable? Es enviar toda la informacion del defecto en forma clara y completa en la plantilla del defecto para que el desarrollador pueda con la información 
				recibida, accionar contra el defecto.
-Checklist para generar el Defecto
	1. Asegurse que es un defecto funcional y no de ambiente 
	2. Reprodcir el error
	3. Tomar evidencia 
	4. Documentar los pasos para reproducir el error 
	5. Documentar el defecto en la herramienta
	6. Asegurarse que el desarrollador este enterado de este registro de defectos, darle seguimiento hasta que se da la solución
-Severidad vs Prioridad en un Defecto
	SEVERIDAD: Se enfoca en el impacto absoluto, en desarrollo
		BAJA - el error es cosmetico o estetico, no impacto funcional
		MEDIA - La falla tiene un error menor y no perjudica la funcionalidad crítica
		ALTA - La falla tiene un error en la ruta crítica, pero hay un camino alterno para continuar las pruebas
		BLOQUEANTE - La falla detiene las pruebas 
	PIORIDAD: Se enfoca en la importancia al cliente final
		BAJA - No es funcional y no se visualiza fácilmente 
		MEDIA - La solución implementada como camino alterno es aceptable para largo plazo
		ALTA - La solución implementada como camino alterno es aceptable para corto plazo
		URGENTE - El proceso diario es severamente impactado o esta detenido
	Para determinar el peso del defecto, tienes que multilplicar el peso de la severidad por el peso de la prioridad, es decir si el peso de 
	la severidad es media (2) y el peso de la prioridad es media(2) el peso final es 2*2=4

*Evidencias de los defectos*
-Formato de Evidencias 
	Para cada caso de prueba se debe tomar evidencia con estos datos:
	-Nombre del proyecto
	-Ejecutor de pruebas
	-Titulo del caso de prueba
	-Ciclo de Prueba
 	-Caso de prueba
	-Paso del caso de prueba
	-Video, Log o imagen 
	-Comentarios relevantes 
-Ciclo de vida de un Defecto
	Encontró una falla ¿qué sigue?
	1. Ejecutor de pruebas encuentra un hallazgo:
		Si es un defecto entonces captura el caso de prueba en estado 'no pasado', registra el defecto y queda el estado de defecto en 'PRIVADO'
		Si no es un defecto queda como 'PASADO'
 	2. Al registrar el defecto se envía una notificación al Líder de Desarrollo y este asigna un responsable de desarrollo y este queda como 'ASIGNADO'
	3. El desarrollador que se le asigno el defecto, reproduce el defecto, valida que si sea:
		Si ES un defecto, lo corrije y lo deja en estado CONTESTADO y notifica la solución del defecto
		Si NO es un defecto lo rechaza y notifica que no es defecto
	4. El ejecutor de pruebas valida que si realmente no es defecto, si así fue, cancela en el proceso y de notifica como PASADO, si sí es un defecto
	   lo registra y lo reenvía al lider de desarrollo para que este defecto vuelva a ser revisado por el mismo u otro desarrollador 
	5. El ejecutor de pruebas despues de que recibe la correción, lo valida, si esta bien entonces de cierra el defecto y queda en estado PASADO
	   si el desarrollador no hace la correccion de manera correcta, se devuelve al Líder de desarrollo y queda en estado REINCIDENTE
*Matriz o herramienta para los defectos* 
-Matriz de Defectos
	Debe contener esta información: 
	Nombre del proyecto, ID Defecto, clasificación del defecto, estado del defecto, prioridad, severidad, tester, desarrollador, descripcion de la falla, 
	ciclo, decha en la que se detectó
-Herramienta de Gestion de Defectos
	Debe tener al menos estas opciones:
	Consultar, generar un nuevo defecto, indicadores de los defectos, filtros, ID Defecto único
	Al registrar el defecto debemos tener una pantalla para registrar toda la informacion del defecto
	En la parte de indicadores, debe tener métricas (graficos) 

**CAPÍTULO 6 - EJECUCIÓN AGIL**
-¿Qué es un método égil?
		Es llevar un proyecto de forma rápida con dos puntos importantes: el ciclo de vida iterativo e incremental
		esto permite al equipo del proyecto incorporar retroalimentación e ir incrementando la experiencia del equipo
		Es periodos cortos basados en iteraciones de 2 a 4 semanas y dar un entregable muy rápido
-Agile Mainifiesto
		Individuos e iteraciones sobre Procesos y herramientas:
		Nos importa mas la metodología, la interacción cara a cara, en lugar de estas utilizando procesos y herramientas para comunicarnos 
		Software funcionando sobre Documentación exhaustiva
		Sí se hace documentacion, pero solo lo necesario 
		Colaboracion con el cliente sobre Negociación contractual
		Respuesta ante el cambio sobre Seguir un plan
-Ciclo de vida Incremental
		Desarrollar por partes el producto del software para despues integrarlas a medida que se completan
		EL agregar cada vez mas funcionalidades al sistema
-Ciclo de vida Iterativo 
		En cada iteración, se revisa y mejora el producto 
		Es importante señalar que este ciclo no implica añadir funcionalidades en el producto, pero si revisión y mejora
-Ciclo de vida Iterativo e Incremental
		Se consigue una versión más estable del software, de más calidad, y añadiendo además nuevas funcionalidades respecto a versiones anteriores
-Concepto Iterativo e Incremental
		El producto se desarrolla por incrementos en el que cada iteracion se obtiene una version funcional del producto
		El sistema se desarrolla poco a poco
		Entre cada iteracion se obtiene una retroalimentacion continua por parte del usuario
-Ciclo Vida ágil
		Plan: se definen requirimientos del sistema y un plan de liberaciones
		Colaboracion: desarrollo de productos entregables  
		Entrega: Se revisa si los productos son entregables (entregas pequeñas)
-Iteración ágil 
		Product Backlog: Lista de contro del proyecto se inserta un un proyecto ágil
		------------ Sistema completo ----------------
		Etapa de incialización: diseño de la iteración
		Etapa de iteración: Modulo A, B y C y el Demo: etapa de review

-Frameworks ágiles
		Métodos que se crearon para apoyar este modelo de trabajo: FRAMEWORKS
		Centrados en ciclos iterativos e incrementales: SCRUM, DEVOPS, LSD, CP, CRISTAL, TDD
		Centrados en el flujo: KANBAN

*Pruebas Exploratorias* 
-¿Qué es un Exploratory Testing?
		Pruebas exploratorias: proceso interactivo de exploración concurrente del producto, diseño de prueba y ejecución de prueba.
		Extendiendo esto, la siguiente prueba que nosotros hacemos se verá influenciada por el resultado de la ultima prueba que realizamos haciendo 
		Exploratory Testing
		Ir aprendiendo entre una prueba y otra prueba para ampliar el aprendizaje
-¿Qué no es un Exploratory Testing?
		Seguir un sript, guion o procedimiento de pruebas
-Exploratory Testing vs Scripted Testing 
		Scripted Testing: Es un examen secuencial de requisito, seguido por el diseño y la documentación de los casos
		ET: es un método de prueba que es muy diferente de las pruebas con un script o procedimiento de prueba
		La diferencia es muy clara para el Scripted Testing necesito hacer un pre diseño de los casos de prueba que voy a ejecutar 
		y el ET no, en esta, voy diseñado, ejecutando y aprendiendo al mismo tiempo
-Técnicas de Exploratory Testing
		Freestyle: prueba exploratoria a la medida: no hay reglas, son buenas cuando te familiarizas por ti mismo con la aplicación
		Scenario: Escenario de prueba, casos de uso y una lista de combinaciones para ejecutar
		Feedback: Construyes tu histori, la historia te guia 
		Strategy: Analisis de valores al limite, clases de particion equivalente, asegura que el tester tenga tips y trucos para detectar errores
		Session: Metodo basado en metas: requerimientos del cliente, identifica riesgos, crear un charter, seleccion heuristica
-Proceso Exploratory Testing
		1. Crea un conjetura o modelo mental 
		2. Crea una o dos pruebas que aprueban esa conjetura 
		3. Ejecuta la prueba
		4. Evalua la salida contra tu conjetura 
		5. Repite el proceso hasta que la conjetura es aprobada o rechazada 